const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

export const courseOutlineAIModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate a study material for python for exam and level of difficulty will be easy with summery of course, List of Chapters along with summery for each chapter, topic list in each chapter, all result in JSON format."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"courseTitle\": \"Introduction to Python Programming (Easy)\",\n  \"courseSummary\": \"This course provides a beginner-friendly introduction to Python programming.  It covers fundamental concepts and syntax, enabling students to write basic Python programs.  The focus is on understanding core principles rather than advanced techniques.\",\n  \"chapters\": [\n    {\n      \"chapterTitle\": \"Chapter 1: Introduction to Python\",\n      \"chapterSummary\": \"This chapter introduces Python, its applications, and setting up the programming environment.  It covers basic syntax and running your first Python program.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Why use Python?\",\n        \"Installing Python\",\n        \"Setting up a development environment (IDE/text editor)\",\n        \"Running your first Python program\",\n        \"Basic Syntax: Indentation, Comments\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Chapter 2: Data Types and Variables\",\n      \"chapterSummary\": \"This chapter explores fundamental data types in Python, including integers, floats, strings, and booleans, and how to work with variables.\",\n      \"topics\": [\n        \"Integers\",\n        \"Floating-point numbers\",\n        \"Strings\",\n        \"Booleans\",\n        \"Variables and assignment\",\n        \"Type conversion\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Chapter 3: Operators\",\n      \"chapterSummary\": \"This chapter covers various operators in Python, including arithmetic, comparison, logical, and assignment operators.\",\n      \"topics\": [\n        \"Arithmetic operators (+, -, *, /, //, %, **)\",\n        \"Comparison operators (==, !=, >, <, >=, <=)\",\n        \"Logical operators (and, or, not)\",\n        \"Assignment operators (=, +=, -=, *=, /=)\",\n        \"Operator precedence\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Chapter 4: Control Flow (Conditional Statements)\",\n      \"chapterSummary\": \"This chapter explains how to control the flow of execution in a program using if, elif, and else statements.\",\n      \"topics\": [\n        \"if statement\",\n        \"if-else statement\",\n        \"if-elif-else statement\",\n        \"Nested conditional statements\",\n        \"Boolean expressions\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Chapter 5: Loops\",\n      \"chapterSummary\": \"This chapter introduces for and while loops for iterating over sequences and performing repetitive tasks.\",\n      \"topics\": [\n        \"for loop\",\n        \"while loop\",\n        \"Loop control statements (break, continue)\",\n        \"Nested loops\",\n        \"Iterating through strings and lists\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Chapter 6: Data Structures: Lists and Tuples\",\n      \"chapterSummary\": \"This chapter introduces lists and tuples, fundamental data structures for storing collections of items.\",\n      \"topics\": [\n        \"Lists: creation, accessing elements, methods (append, insert, remove, etc.)\",\n        \"Tuples: creation, accessing elements, immutability\",\n        \"List slicing\",\n        \"List comprehension (basic introduction)\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Chapter 7: Functions\",\n      \"chapterSummary\": \"This chapter explains how to define and use functions to modularize code and improve reusability.\",\n      \"topics\": [\n        \"Defining functions\",\n        \"Function arguments and parameters\",\n        \"Return values\",\n        \"Function calls\",\n        \"Scope of variables\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Chapter 8: Input and Output\",\n      \"chapterSummary\": \"This chapter covers how to get input from the user and display output to the console.\",\n      \"topics\": [\n        \"Input function (input())\",\n        \"Print function (print())\",\n        \"Formatting output using f-strings\"\n      ]\n    }\n  ]\n}\n```\n"},
      ],
    },
  ],
});

export const generateNotesAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate exam material detail content for each chapter , Make sure to includes all topic point in the content, make sure to give content in HTML format (Do not Add HTMLK , Head, Body, title tag), The chapters :{\n      \"chapterTitle\": \"Chapter 1: Core Python Fundamentals\",\n      \"chapterSummary\": \"Review of essential Python concepts beyond the basics, focusing on practical application and efficiency.\",\n      \"topics\": [\n        \"Advanced Data Structures (Sets, Dictionaries, Deques)\",\n        \"List comprehensions and generator expressions\",\n        \"Working with files (reading, writing, different modes)\",\n        \"Exception handling (try-except-finally blocks, custom exceptions)\",\n        \"Context managers (`with` statement)\",\n        \"Object-oriented programming concepts (inheritance, polymorphism, encapsulation)\",\n        \"Modules and Packages: Importing and using external libraries\"\n      ]\n    },\n"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```html\n<div>\n  <h2>Chapter 1: Core Python Fundamentals</h2>\n  <p>Review of essential Python concepts beyond the basics, focusing on practical application and efficiency.</p>\n\n  <h3>Topics:</h3>\n\n  <h4>Advanced Data Structures (Sets, Dictionaries, Deques)</h4>\n  <ul>\n    <li><b>Sets:</b>\n      <ul>\n        <li>Definition and characteristics: Unordered collections of unique elements.</li>\n        <li>Creating sets: Using curly braces `{}` or the `set()` constructor.</li>\n        <li>Set operations: Union (`|` or `union()`), intersection (`&` or `intersection()`), difference (`-` or `difference()`), symmetric difference (`^` or `symmetric_difference()`).</li>\n        <li>Set methods: Adding elements (`add()`, `update()`), removing elements (`remove()`, `discard()`, `pop()`, `clear()`).</li>\n        <li>Use cases: Removing duplicates, membership testing, mathematical set operations.</li>\n      </ul>\n    </li>\n    <li><b>Dictionaries:</b>\n      <ul>\n        <li>Definition and characteristics: Key-value pairs, keys must be unique and immutable.</li>\n        <li>Creating dictionaries: Using curly braces `{}` with key-value pairs or the `dict()` constructor.</li>\n        <li>Accessing values: Using keys within square brackets `[]` or the `get()` method.</li>\n        <li>Dictionary methods: Adding/updating entries, removing entries (`pop()`, `popitem()`, `del`), iterating through keys, values, and items (`keys()`, `values()`, `items()`).</li>\n        <li>Dictionary comprehensions: Concise way to create dictionaries.</li>\n        <li>Use cases: Storing and retrieving data, representing relationships.</li>\n      </ul>\n    </li>\n    <li><b>Deques (Double-Ended Queues):</b>\n      <ul>\n        <li>Definition and characteristics:  A list-like structure that allows adding and removing elements from both ends efficiently.  From the `collections` module.</li>\n        <li>Creating deques: Using `deque()` constructor from the `collections` module.</li>\n        <li>Deque methods: `append()`, `appendleft()`, `pop()`, `popleft()`, `extend()`, `extendleft()`, `rotate()`.</li>\n        <li>Use cases: Implementing queues, stacks, managing data at both ends efficiently.</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h4>List comprehensions and generator expressions</h4>\n  <ul>\n    <li><b>List Comprehensions:</b>\n      <ul>\n        <li>Definition:  A concise way to create lists based on existing iterables.</li>\n        <li>Syntax: `[expression for item in iterable if condition]`.</li>\n        <li>Advantages:  Readability, conciseness, and often faster than equivalent `for` loops.</li>\n        <li>Use cases:  Data transformation, filtering, creating new lists based on conditions.</li>\n      </ul>\n    </li>\n    <li><b>Generator Expressions:</b>\n      <ul>\n        <li>Definition:  Similar to list comprehensions, but create generators (lazy evaluation).</li>\n        <li>Syntax: `(expression for item in iterable if condition)`. Note the parentheses.</li>\n        <li>Advantages:  Memory efficiency, particularly for large datasets, as values are generated on demand.</li>\n        <li>Use cases:  Iterating over large datasets, creating custom iterators.</li>\n      </ul>\n    </li>\n    <li><b>Comparison:</b>  Differences in memory usage (list comprehensions create the entire list in memory immediately, while generator expressions yield one value at a time), and use cases.</li>\n  </ul>\n\n  <h4>Working with files (reading, writing, different modes)</h4>\n  <ul>\n    <li><b>Opening Files:</b>\n      <ul>\n        <li>`open()` function: Syntax and arguments (file path, mode).</li>\n        <li>File modes:\n          <ul>\n            <li>`r`: Read (default).</li>\n            <li>`w`: Write (truncates existing file or creates a new one).</li>\n            <li>`a`: Append (writes to the end of the file).</li>\n            <li>`x`: Create (creates a new file; fails if the file exists).</li>\n            <li>`b`: Binary mode (e.g., `rb`, `wb`).</li>\n            <li>`t`: Text mode (default).</li>\n            <li>`+`: Update (e.g., `r+`, `w+`, allows both reading and writing).</li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li><b>Reading Files:</b>\n      <ul>\n        <li>`read()`: Reads the entire file content as a single string.</li>\n        <li>`readline()`: Reads one line at a time.</li>\n        <li>`readlines()`: Reads all lines into a list of strings.</li>\n        <li>Iterating over lines:  Using a `for` loop directly on the file object.</li>\n      </ul>\n    </li>\n    <li><b>Writing Files:</b>\n      <ul>\n        <li>`write()`: Writes a string to the file.</li>\n        <li>`writelines()`: Writes a list of strings to the file.</li>\n      </ul>\n    </li>\n    <li><b>File Pointers:</b> The concept of the file pointer's position and the use of methods like `seek()` and `tell()`.</li>\n    <li><b>Closing Files:</b>  Importance of closing files to release resources (`close()` method). This is often handled by the context manager.</li>\n  </ul>\n\n  <h4>Exception handling (try-except-finally blocks, custom exceptions)</h4>\n  <ul>\n    <li><b>`try-except-finally` Blocks:</b>\n      <ul>\n        <li>`try` block:  Code that might raise an exception.</li>\n        <li>`except` block:  Handles specific exceptions (or a general `Exception` class).  Multiple `except` blocks can handle different exception types.</li>\n        <li>`finally` block:  Code that always executes, regardless of whether an exception occurred (used for cleanup).</li>\n      </ul>\n    </li>\n    <li><b>Exception Types:</b>  Common built-in exceptions (e.g., `TypeError`, `ValueError`, `IndexError`, `KeyError`, `FileNotFoundError`).</li>\n    <li><b>Raising Exceptions:</b>  The `raise` statement:  Used to explicitly raise an exception.</li>\n    <li><b>Custom Exceptions:</b>\n      <ul>\n        <li>Creating custom exception classes: Subclassing the `Exception` class (or a more specific exception class).</li>\n        <li>Defining custom exception messages and behavior.</li>\n        <li>Use cases:  Handling application-specific errors.</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h4>Context managers (`with` statement)</h4>\n  <ul>\n    <li><b>Definition:</b>  Objects that define a context (e.g., opening and closing a file).</li>\n    <li><b>`with` statement:</b>  Ensures that resources are properly managed (e.g., files are closed), even if exceptions occur.</li>\n    <li><b>Advantages:</b>  Automatic setup and teardown, improves code readability and reliability.</li>\n    <li><b>How it works:</b>  The `with` statement uses the `__enter__()` and `__exit__()` methods of the context manager object. The `__enter__()` method is called when entering the `with` block, and the `__exit__()` method is called when exiting the block (whether normally or due to an exception).</li>\n    <li><b>Use cases:</b>  File handling, database connections, network connections, acquiring and releasing locks.</li>\n  </ul>\n\n  <h4>Object-oriented programming concepts (inheritance, polymorphism, encapsulation)</h4>\n  <ul>\n    <li><b>Classes and Objects:</b>\n      <ul>\n        <li>Classes as blueprints for objects.</li>\n        <li>Objects as instances of classes.</li>\n      </ul>\n    </li>\n    <li><b>Inheritance:</b>\n      <ul>\n        <li>Definition:  Creating new classes (child/subclass) based on existing classes (parent/superclass).</li>\n        <li>Benefits: Code reuse, organizing code hierarchically, creating specialized classes.</li>\n        <li>Syntax:  `class ChildClass(ParentClass): ...`</li>\n        <li>`super()` function: Calling methods of the parent class from the child class.</li>\n      </ul>\n    </li>\n    <li><b>Polymorphism:</b>\n      <ul>\n        <li>Definition:  The ability of objects of different classes to respond to the same method call in their own way.</li>\n        <li>Duck typing: \"If it walks like a duck and quacks like a duck, then it must be a duck.\" (Focus on behavior, not necessarily class type).</li>\n        <li>Method overriding:  Redefining a method in a subclass.</li>\n      </ul>\n    </li>\n    <li><b>Encapsulation:</b>\n      <ul>\n        <li>Definition:  Bundling data (attributes) and methods that operate on that data within a single unit (the class).</li>\n        <li>Data hiding:  Restricting access to internal data from outside the class.  Python uses conventions (e.g., `_` for protected members, `__` for name mangling of private members).</li>\n        <li>Benefits:  Data protection, code organization, and modularity.</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h4>Modules and Packages: Importing and using external libraries</h4>\n  <ul>\n    <li><b>Modules:</b>\n      <ul>\n        <li>Definition:  Files containing Python code (e.g., functions, classes, variables).</li>\n        <li>Creating modules:  Saving Python code in `.py` files.</li>\n        <li>Importing modules:  Using the `import` statement.  Syntax: `import module_name`, `from module_name import item`.</li>\n        <li>Using imported items:  Accessing functions and variables using dot notation (e.g., `module_name.function_name`).</li>\n        <li>`as` keyword:  Creating an alias for a module or imported item (e.g., `import module_name as alias`).</li>\n      </ul>\n    </li>\n    <li><b>Packages:</b>\n      <ul>\n        <li>Definition:  A collection of modules organized in a directory structure.</li>\n        <li>Creating packages:  Creating a directory and including an `__init__.py` file (can be empty).</li>\n        <li>Importing modules from packages:  Syntax:  `import package_name.module_name` or `from package_name.module_name import item`.</li>\n        <li>Subpackages:  Packages within packages.</li>\n      </ul>\n    </li>\n    <li><b>Standard Library Modules:</b>  Familiarization with useful modules from the Python standard library (e.g., `os`, `sys`, `math`, `datetime`, `random`, `json`, `csv`).  Understanding of their purpose and basic usage is essential.</li>\n    <li><b>Installing External Libraries:</b>\n      <ul>\n        <li>Using `pip`: The package installer for Python.</li>\n        <li>Installing packages: `pip install package_name`.</li>\n        <li>Uninstalling packages: `pip uninstall package_name`.</li>\n        <li>Listing installed packages: `pip list`.</li>\n        <li>Managing dependencies (e.g., `requirements.txt` files).</li>\n      </ul>\n    </li>\n    <li><b>Using External Libraries:</b>  Importing and using functions, classes, and other resources from external libraries after installation. Examples including libraries like `requests`, `numpy`, `pandas` can be explored at this level.</li>\n  </ul>\n</div>\n```"},
      ],
    },
  ],
});

// Define an async function to send messages
export async function sendCourseOutlineMessage(userInput) {
  const result = await courseOutlineAIModel.sendMessage(userInput);
  return result.response.text();
}

// Example usage
async function run() {
  try {
    const response = await sendCourseOutlineMessage("Tell me more about Python functions");
    console.log(response);
  } catch (error) {
    console.error("Error:", error);
  }
}

// Call the run function
run();